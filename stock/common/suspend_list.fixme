    def _get_stock_suspend_list_of_day(self, day):
        print("Fetching Suspend List %s" % day)
        req_url = 'http://www.cninfo.com.cn/cninfo-new/memo-2'
        get_headers = {
            'Host': 'www.cninfo.com.cn',
            'Referer': 'http://www.cninfo.com.cn/cninfo-new/memo-2',
            'Upgrade-Insecure-Requests': '1',
            'User-Agent': COMMON_VARS_OBJ.AGENT['1']}
        get_params = {'queryDate': day,
                      'queryType': 'queryType1'}
        s = requests.session()
        result = s.get(req_url, headers=get_headers, params=get_params, verify=False)
        b = result.text
        soup = BeautifulSoup(b, 'lxml')
        c = soup.find("div", {"id": "suspensionAndResumption1"})
        d = c.findAll("div", {"class": "column2"})
        start_idx = 0
        end_idx = 1
        if re.search(u'今起停牌', b) is None:
            start_idx = -999
            end_idx = 0
        if re.search(u'今起复牌', b) is None:
            end_idx = -999
        try:
            start_from_day = self._handle_an_uls(d[start_idx].findAll('ul'))
        except IndexError:
            start_from_day = []
        try:
            end_from_day = self._handle_an_uls(d[end_idx].findAll('ul'))
        except IndexError:
            end_from_day = []
        return start_from_day, end_from_day

    def get_all_stock_suspend_list(self):
        try:
            with open('%s/dates/raw_suspend_date_list.pickle' % COMMON_VARS_OBJ.stock_data_root, 'rb') as f:
                final_dict = pickle.load(f)
        except FileNotFoundError:
            final_dict = {}
        for day in self.market_open_days:
            try:
                _ = final_dict[day]
            except KeyError:
                s, e = self._get_stock_suspend_list_of_day(day)
                final_dict[day] = {'start': s, 'end': e}
                with open('%s/dates/raw_suspend_date_list.pickle' % COMMON_VARS_OBJ.stock_data_root, 'wb') as f:
                    pickle.dump(final_dict, f, -1)
        @staticmethod
    def _handle_an_uls(uls):
        final_list = []
        for line in uls:
            stock = line.find("li", {"class": "ta-1"}).get_text()
            if stock == '代码':
                continue
            name = line.find("li", {"class": "ta-2"}).get_text()
            start_time = line.find("li", {"class": "ta-3"}).get_text()
            end_time = line.find("li", {"class": "ta-4"}).get_text()
            try:
                start_time = re.search(r'([0-9]{4}-[0-9]{2}-[0-9]{2})', start_time).group(0)
            except AttributeError:
                start_time = None
            try:
                end_time = re.search(r'([0-9]{4}-[0-9]{2}-[0-9]{2})', end_time).group(0)
            except AttributeError:
                end_time = None
            final_list.append({'code': stock, 'name': name, 'start_time': start_time, 'end_time': end_time})
        return final_list